{"version":3,"sources":["Misc/Header.js","Notes/NoteContext.js","Folders/FolderList.js","Notes/NoteList.js","Notes/Note.js","Misc/GoBack.js","Notes/FilteredNoteFolder.js","ErrorHandlers/ErrorForm.js","Folders/AddFolder.js","Notes/AddNote.js","ErrorHandlers/ErrorBoundary.js","App.js","index.js"],"names":["Header","className","to","React","Component","NoteContext","createContext","notes","folders","addNote","deleteNote","FolderList","Consumer","context","cont","map","el","index","key","id","name","folderArr","NoteList","notesArray","timeObj","Date","modified","toLocaleDateString","year","month","day","onClick","length","Note","note","find","parseInt","props","match","params","note_id","fileName","folderid","timeObj1","content","GoBack","history","goBack","FilteredFolder","filtered","filter","folder_id","console","log","folderName","filteredFolder","ErrorForm","error","postObj","method","headers","body","AddFolder","handleFolderInputChange","value","setState","touched","state","this","trim","nameError","validateName","onSubmit","e","handleSubmit","htmlFor","type","onChange","event","target","placeholder","minLength","maxLength","required","require","config","AddNote","preventDefault","folder","JSON","stringify","fetch","then","res","json","data","window","location","href","reload","catch","validateContent","validateFolder","contentError","folderError","folderOptions","updateName","updateContent","updateFolder","ErrorBoundary","hasError","children","ENDPOINT","App","deleteNoteAPIRequest","noteId","ok","arrInd","indexOf","newArrB","slice","newArrA","handleFolderSubmit","cuid","contextValue","path","component","Provider","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d880dc9b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header-container\">\r\n                <Link className=\"header-link\" to=\"/\"><h1>Noteful</h1></Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst NoteContext = React.createContext({\r\n    notes: [],\r\n    folders: [],\r\n    addNote: () => {},\r\n    deleteNote: () => {},\r\n})\r\n\r\nexport default NoteContext;","import React from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport NoteContext from '../Notes/NoteContext';\r\n\r\n\r\nclass FolderList extends React.Component {\r\n\r\n    render() {\r\n        const folderArr = (cont) => {\r\n            if (cont) return cont.folders.map((el, index) => {\r\n                return (\r\n                    <NavLink key={index} to={`/folder/${el.id}`} className=\"folder-box\"><h3>{el.name}</h3></NavLink>\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <NoteContext.Consumer>\r\n                {(context) => {\r\n                    return (\r\n                        <div>\r\n                        <ul className=\"folder-list\">\r\n                            <h3>Folders</h3>\r\n                            {folderArr(context)}\r\n                        </ul>\r\n                        <Link to=\"/addfolder\"><button>Add Folder</button></Link>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </NoteContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FolderList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport NoteContext from './NoteContext';\r\n\r\n\r\n\r\n\r\nclass NoteList extends React.Component {\r\n\r\n    render() {\r\n        const notesArray = (cont) => cont.notes.map((el, index) => {\r\n            const timeObj = new Date(el.modified)\r\n            const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n            return (\r\n                <div className=\"note-link\" key={el.id}>\r\n                    <Link key={index} to={`notes/${el.id}`} className=\"note-link-embed\">\r\n                        <div>\r\n                            {el.name}\r\n                        </div>\r\n                        <div>\r\n                            Modified {timeObj.toLocaleDateString('en-US', options)}\r\n                        </div>\r\n                </Link>\r\n                        <div>\r\n                            <button onClick={() => cont.deleteNote(el.id)}>Delete</button>\r\n                        </div>\r\n                    </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <NoteContext.Consumer>\r\n                {context => {\r\n                    return (\r\n                <div>\r\n                    <h2>Notes</h2>\r\n                    <ul className=\"note-list\">\r\n                        {notesArray(context)}\r\n                        {!(notesArray(context)).length ? <p>'Make sure you have the server up'</p> : ''}\r\n                    </ul>\r\n                    <Link to=\"/addnote\"><button>Add Note</button></Link>\r\n                </div>\r\n                    )\r\n                }}\r\n            </NoteContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default NoteList;","import React from 'react';\r\nimport NoteContext from './NoteContext';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Note extends React.Component {\r\n\r\n    render() {\r\n        // const note = this.props.state.notes.find(el => {\r\n        //     return el.id === this.props.match.params.note_id\r\n        // })\r\n        // const fileName = this.props.state.folders.find(el => {\r\n        //     return note.folderId === el.id\r\n        // }).name\r\n        // const timeObj1 = new Date(note.modified)\r\n        return (\r\n            <NoteContext.Consumer>\r\n                {(context) => {\r\n                    const note = context.notes.find(el => {\r\n                        return parseInt(el.id) === parseInt(this.props.match.params.note_id)\r\n                    }) || {};\r\n                    const fileName = context.folders.find(el => {\r\n                        return note.folderid === el.id\r\n                    }) || {};\r\n                    const timeObj1 = new Date(note.modified);\r\n                    const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n                    return (\r\n                        <div className=\"a-note\">\r\n                           {note.name && <div>\r\n                               <div>\r\n                                <h3>\r\n                                    {note.name}\r\n                                </h3>\r\n                                <h6>In file {fileName.name}</h6>\r\n                                <button onClick={() => context.deleteNote(note.id, this.props.match.params)}>Delete Note</button>\r\n                            </div>\r\n                            <h6>Modified {timeObj1.toLocaleDateString('en-US', options)}</h6>\r\n                            <p>{note.content}</p>\r\n                            </div>\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n                }\r\n\r\n            </NoteContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nNote.propTypes= {\r\n    match: PropTypes.object\r\n  };\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nfunction GoBack(props) {\r\n    return (\r\n    <button onClick={() => props.history.goBack()}><div className=\"go-back-button\">{'<'}</div></button>\r\n    )\r\n}\r\n\r\nexport default GoBack","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport NoteContext from './NoteContext';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilteredFolder extends React.Component {\r\n\r\n  render() {\r\n\r\n\r\n    const filtered = (context) => {\r\n      return context.notes.filter(el => {\r\n        return parseInt(el.folderid) === parseInt(this.props.match.params.folder_id)\r\n      });\r\n    }\r\n\r\n    const folderName = (context) => (context.folders.find(el => {\r\n      return parseInt(el.id) === parseInt(this.props.match.params.folder_id)\r\n    }) || {}).name;\r\n\r\n    const filteredFolder = (filtered) => filtered.map((el, index) => {\r\n      return (\r\n        <Link key={index} to={`/notes/${el.id}`} className=\"note-link-embed\"><div className=\"note-link\" key={el.id}>{el.name}</div></Link>\r\n      )\r\n    })\r\n\r\n\r\n    return (\r\n      <NoteContext.Consumer>\r\n        {context => {\r\n          console.log(filtered(context));\r\n          return (\r\n            <div>\r\n              <h2>{folderName(context)}</h2>\r\n              <div className=\"note-list\">{filteredFolder(filtered(context))}</div>\r\n            </div>\r\n          )\r\n        }\r\n        }\r\n      </NoteContext.Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nFilteredFolder.propTypes= {\r\n  match: PropTypes.object\r\n};\r\n\r\nexport default FilteredFolder;","import React from 'react';\r\n\r\nfunction ErrorForm(props) {\r\n    if (props.error) {\r\n        return (\r\n            <div className=\"error\">{props.error}</div>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorForm;\r\n","// on submit, make a fetch req with form data\r\n\r\nimport React from 'react';\r\nimport cuid from 'cuid';\r\nimport ErrorForm from '../ErrorHandlers/ErrorForm';\r\n\r\n\r\nconst postObj = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: {}\r\n}\r\n\r\n\r\nclass AddFolder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: '',\r\n                touched: false\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFolderInputChange = (value) => {\r\n        this.setState({ name: { value: value, touched: true } })\r\n    }\r\n\r\n\r\n\r\n    validateName() {\r\n        const name = this.state.name.value.trim();\r\n        if (name.length === 0) {\r\n            return \"Name is required\"\r\n        } else if (name.length < 3) {\r\n            return \"Name must be at least 3 characters\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const nameError = this.validateName();\r\n\r\n        return (\r\n            <div>\r\n                <form className=\"addnote-form\" onSubmit={e => this.props.handleSubmit(e, this.state, postObj)}>\r\n                    <label htmlFor=\"folder-name-input\">Add a Folder:</label>\r\n                    <input type='text'\r\n                        name=\"folder-name-input\"\r\n                        id=\"folder-name-input\"\r\n                        onChange={event => this.handleFolderInputChange(event.target.value)}\r\n                        placeholder=\"Name\"\r\n                        minLength={3}\r\n                        maxLength={12}\r\n                        required />\r\n                    {this.state.name.touched && <ErrorForm error={nameError} />}\r\n                    <button type='submit'>submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default AddFolder;","import React from 'react';\r\nimport NoteContext from './NoteContext';\r\nimport cuid from 'cuid';\r\nimport ErrorForm from '../ErrorHandlers/ErrorForm';\r\nrequire('dotenv').config();\r\n\r\nconst ENDPOINT = 'http://localhost:8000';\r\n\r\nconst postObj = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: {}\r\n}\r\n\r\n\r\nclass AddNote extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: '',\r\n                touched: false\r\n            },\r\n            content: {\r\n                value: '',\r\n                touched: false\r\n            },\r\n            folder: {\r\n                value: null,\r\n                touched: false\r\n            }\r\n        }\r\n    }\r\n\r\n    updateName(name) {\r\n        this.setState({ name: { value: name, touched: true } })\r\n    }\r\n    updateContent(content) {\r\n        this.setState({ content: { value: content, touched: true } })\r\n    }\r\n    updateFolder(folder) {\r\n        this.setState({ folder: { value: folder, touched: true } })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let { name, content, folder } = this.state;\r\n        folder.value = parseInt(folder.value);\r\n        \r\n        postObj.body = {\r\n            name: name.value,\r\n            content: content.value,\r\n            folderid: folder.value\r\n        };\r\n\r\n        postObj.body = JSON.stringify(postObj.body);\r\n\r\n\r\n        fetch(`${ENDPOINT}/notes`, postObj)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    name: {\r\n                        value: '',\r\n                        touched: false,\r\n                    },\r\n                    content: {\r\n                        value: '',\r\n                        touched: false\r\n                    },\r\n                    folder: {\r\n                        value: 0,\r\n                        touched: false\r\n                    }\r\n                })\r\n            }).then(() => {\r\n                window.location.href = '/';\r\n                window.location.reload();\r\n            }).catch(error => console.log(error))\r\n    }\r\n\r\n    validateName = () => {\r\n        const name = this.state.name.value.trim()\r\n        if (name.length === 0) {\r\n            return \"Name is required\"\r\n        } else if (name.length < 2) {\r\n            return \"Name must be longer than 2 characters\"\r\n        }\r\n    }\r\n    validateContent = () => {\r\n        const content = this.state.content.value.trim();\r\n        if (content.length === 0) {\r\n            return \"A description is required\"\r\n        }\r\n    }\r\n    validateFolder = () => {\r\n        const folder = this.state.folder.value;\r\n        if (folder === '') {\r\n            return 'A folder must be selected'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const nameError = this.validateName();\r\n        const contentError = this.validateContent();\r\n        const folderError = this.validateFolder();\r\n\r\n        return (\r\n            <NoteContext.Consumer>\r\n                {context => {\r\n                    console.log(context.folders)\r\n                    const folderOptions = context.folders.map((el, index) => {\r\n                        return (<option key={index} value={el.id}>{el.name}</option>)\r\n                    })\r\n                    return (\r\n                        <div>\r\n                            <form className=\"addnote-form\" onSubmit={e => this.handleSubmit(e)}>\r\n                                <fieldset className=\"addnote-form\">\r\n                                    <legend>Add a note:</legend>\r\n                                    <label htmlFor=\"addnote-input-name\">Name:</label>\r\n                                    <input type='text' name=\"addnote-name\" id=\"addnote-name\" onChange={event => this.updateName(event.target.value)}\r\n                                        required maxLength={12} minLength={2}\r\n                                    />\r\n                                    {this.state.name.touched && <ErrorForm error={nameError} />}\r\n\r\n                                    <label htmlFor=\"addnote-input-content\">Content:</label>\r\n                                    <input type='text' name=\"addnote-content\" id=\"addnote-content\" onChange={event => this.updateContent(event.target.value)}\r\n                                        required minLength={1}\r\n                                    />\r\n                                    {this.state.content.touched && <ErrorForm error={contentError} />}\r\n\r\n                                    <label htmlFor=\"addnote-input-folder\">Select Folder:</label>\r\n                                    <select name=\"addnote-folder\" id=\"addnote-folder\" onChange={event => this.updateFolder(event.target.value)} required>\r\n                                        <option>None</option>\r\n                                        {folderOptions}\r\n                                    </select>\r\n                                    {this.state.folder.touched && <ErrorForm error={folderError} />}\r\n\r\n                                    <div>\r\n                                        <button type='submit'>Submit</button>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </form>\r\n                        </div>\r\n                    )\r\n                }\r\n                }\r\n            </NoteContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AddNote;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <div>\r\n                    <h2>Items not properly sourced from server. Check that you have it set up properly.</h2>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './Misc/Header';\r\nimport FolderList from './Folders/FolderList';\r\nimport NoteList from './Notes/NoteList';\r\nimport Note from './Notes/Note';\r\nimport GoBack from './Misc/GoBack';\r\nimport FilteredFolder from './Notes/FilteredNoteFolder';\r\nimport NoteContext from './Notes/NoteContext';\r\nimport AddFolder from './Folders/AddFolder';\r\nimport AddNote from './Notes/AddNote';\r\nimport ErrorBoundary from './ErrorHandlers/ErrorBoundary';\r\nimport cuid from 'cuid';\r\n\r\nconst ENDPOINT = 'http://localhost:8000';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    notes: [],\r\n    folders: [],\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${ENDPOINT}/notes`).then(res => {\r\n      if (res.ok) {\r\n        return res.json()\r\n      }\r\n    }).then(json => this.setState({ notes: json }));\r\n    fetch(`${ENDPOINT}/folders`).then(res => {\r\n      if (res.ok) {\r\n        return res.json()\r\n      }\r\n    }).then(json => this.setState({ folders: json }));\r\n  }\r\n\r\n  // deleteNote = (id) => {\r\n  //   const arrA = this.state.notes;\r\n  //   console.log(arrA.splice(arrA.indexOf(arrA.find(el => el.id === id)), 1));\r\n  //   // this.setState({notes: []});\r\n  // }\r\n\r\n\r\n\r\n  deleteNoteAPIRequest = (noteId, params) => {\r\n    fetch(`${ENDPOINT}/notes/${noteId}`, {\r\n      method: 'DELETE',\r\n      headers: {}\r\n    }).then(res => {\r\n      if (!res.ok) {\r\n        return res.json().then(error => { throw error })\r\n      }\r\n      return res\r\n    }).then(data => {\r\n      const arrInd = this.state.notes.indexOf(this.state.notes.find(el => el.id === noteId))\r\n      const newArrB = this.state.notes.slice(0, arrInd);\r\n      const newArrA = this.state.notes.slice(arrInd + 1, this.state.notes.length - 1);\r\n      this.setState({ notes: [...newArrB, ...newArrA] })\r\n    }).then(() => {\r\n      // if the delete button, when clicked in a nested note page, it will have params\r\n      // so if there are params, relocate to /\r\n      if (params) window.location.href = '/';\r\n    })\r\n      .catch(e => console.error(e))\r\n  }\r\n\r\n  handleFolderSubmit = (e, state, postObj) => {\r\n    e.preventDefault();\r\n    const { name } = state;\r\n    postObj.body = JSON.stringify({\r\n        name: name.value,\r\n        id: cuid()\r\n    })\r\n    fetch(`${ENDPOINT}/folders`, postObj)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            this.setState({ folders: [...this.state.folders, data]})\r\n        }).catch(e => console.error(e));\r\n}\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const contextValue = {\r\n      folders: this.state.folders,\r\n      notes: this.state.notes,\r\n      deleteNote: this.deleteNoteAPIRequest\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n\r\n          <Route path='/' component={Header} />\r\n        </header>\r\n        <main>\r\n          <NoteContext.Provider value={contextValue}>\r\n            <div className=\"sidebar\">\r\n              <Route path='/:notes/' component={GoBack} />\r\n              <Route path='/' component={FolderList} />\r\n            </div>\r\n            <div className=\"content-module\">\r\n              <Switch>\r\n                <ErrorBoundary>\r\n                  <Route exact path='/' component={NoteList} />\r\n                  <Route path='/folder/:folder_id/' render={(props) => {\r\n                    return <FilteredFolder {...props} />\r\n                  }} />\r\n                  <Route path='/notes/:note_id' render={(props) => <Note  {...props} />} />\r\n                  <Route path='/addFolder' render={props => <AddFolder {...props} handleSubmit={this.handleFolderSubmit} />} />\r\n                  <Route path='/addnote' component={AddNote} />\r\n                </ErrorBoundary>\r\n              </Switch>\r\n            </div>\r\n          </NoteContext.Provider>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}